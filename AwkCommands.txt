Print the length of the longest input line:
-----------------------------------------
awk ’{ if (length($0) > max) max = length($0) }
END { print max }’ data

• Print every line that is longer than 80 characters:
-----------------------------------------
awk ’length($0) > 80’ data
The sole rule has a relational expression as its pattern and it has no action—
so the default action, printing the record, is used.

• Print the length of the longest line in data:
-----------------------------------------
expand data | awk ’{ if (x < length()) x = length() }
END { print "maximum line length is " x }’
The input is processed by the expand utility to change tabs into spaces, so the
widths compared are actually the right-margin columns.

• Print every line that has at least one field:
-----------------------------------------
awk ’NF > 0’ data
This is an easy way to delete blank lines from a file (or rather, to create a new
file similar to the old file but from which the blank lines have been removed).

• Print seven random numbers from 0 to 100, inclusive:
-----------------------------------------
awk ’BEGIN { for (i = 1; i <= 7; i++)
print int(101 * rand()) }’

• Print the total number of bytes used by files:
-----------------------------------------
ls -l files | awk ’{ x += $5 } ; END { print "total bytes: " x }’

• Print the total number of kilobytes used by files:
-----------------------------------------
ls -l files | awk ’{ x += $5 }
END { print "total K-bytes: " (x + 1023)/1024 }’

• Print a sorted list of the login names of all users:
-----------------------------------------
awk -F: ’{ print $1 }’ /etc/passwd | sort

• Count the lines in a file:
-----------------------------------------
awk ’END { print NR }’ data



Pass paramters to awk commands
-----------------------------------------

awk -v patrn2="$pattern2" -F',' '$10 == patrn2' $filename | sed 's/ //g' >> DailyMon.txt

awk -v patrn3="$pattern3" -F',' '$10 == patrn3' $filename | sed 's/ //g' >> DailyMon.txt


print two search patterns
---------------------------------------

awk ’/12/ { print $0 }
> /21/ { print $0 }’ BBS-list inventory-shipped

print the total bytes 
-------------------------------

 awk '$6 == "Nov" { sum += $5 } END { print sum }'


match the value in field to an expression and remove all empty lines
-----------------------------------------------------------------------

awk -F',' '$3 !~ /shoe/' item_file.txt | awk 'NF > 0'


match the value in field to an expression 
--------------------------------------------------

awk -F',' '$3 !~ /shoe/ { print $1 }' item_file.txt

Split the files based on substr and give path the split files
------------------------------------------------------------------

  awk  -v b="/work_area_dev/POSHUB_DEV/" '{ a=substr($0,1,3); print $0 > (b a "#79.SAPPRDL_perm")}' /work_area_dev/POSHUB_DEV/process/PermPriceChangeOp.txt


Set record separator 
------------------------------------------------------------------

awk ’BEGIN { RS = "/" }
{ print $0 }’ BBS-list


print no of lines in  a file 	
------------------------------------------------------------------

 awk 'END{ print NR }' item_file.txt



assign variable ;print the header ,total cost , and summary
------------------------------------------------------------------

awk -F',' 'BEGIN { print "Total cost price of each item";print "----------------------" } { qty=$4;cp=$5;totalcost=qty*cp;print totalcost,$1,$2,$3 } END { print "No of records:"NR }' item_file.txt


SET FS AND OFS ; assign variable ;print the header ,total cost , and summary
------------------------------------------------------------------
awk 'BEGIN { FS = ",";OFS = ":";print "Total cost price of each item";print "----------------------" } { qty=$4;cp=$5;totalcost=qty*cp;print totalcost,$1,$2,$3 } END { print "No of records:"NR }' item_file.txt



SET FS AND OFS ; assign variable ;print the header ,total cost ,cost of all items and summary
--------------------------------------------------------------------------------
awk 'BEGIN { FS = ",";OFS = ":";print "Total cost price of each item";print "----------------------" } ; { qty=$4;cp=$5;totalcost=qty*cp;total=total+totalcost;print totalcost,$1,$2,$3,total } ; END { print "total cost all items:"total;print "No of records:"NR }' item_file.txt



Get all records for containing both 2400 and foo ( second ---or 	)
------------------------------------------------------------------


awk ’/2400/ && /foo/’ BBS-list


awk ’/2400/ || /foo/’ BBS-list




Get all records that do not contain foo
------------------------------------------------------------------

awk ’! /foo/’ BBS-list


Count the no. of records that contain shoe
------------------------------------------------------------------

awk 'BEGIN { print "Analysis of \"shoe\"" } /shoe/ { ++n } END { print "\"shoe\" appears", n, "times." }' item_file.txt



remove duplicate lines
------------------------------------------------------------------

awk '!x[$0]++'


Print lines based on pattern
------------------------------------------------------------------

awk '{ $3=20 } print$0

------------------------------------------------------------------

awk '$6 == "Nov" { sum += $5 } END { print sum }'


-------------------------------------------------------------------

awk -F'|' '$3 == 0 { print $0 }' ACPT.txt >> ACPT_out.txt